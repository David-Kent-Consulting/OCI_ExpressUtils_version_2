---


# Copyright 2019 â€“ 2020 David Kent Consulting, Inc.
# All Rights Reserved.
# 
# NOTICE:  All information contained herein is, and remains
# the property of David Kent Consulting, Inc.; David Kent Cloud Solutions, Inc.;
# and its affiliates (The Company). The intellectual and technical concepts contained
# herein are proprietary to The Company and may be covered by U.S. and Foreign Patents,
# patents in process, and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from The Company.
#
# This file is subject to the terms and conditions defined in
# file 'LICENSE.txt', which is part of this source code package.


# We start by retrieving the compartment and VCN OCIDs. Then we call oci_subnet_facts and pass
# to it the OCID, if present, from subnet_id. We ignore the error and pass through to oci_subnet.
# If subnet_object exists, then we skip the task and exit the script, otherwise we create 
# the subnet.

    - name: Debug
      debug:
        msg: "{{ VcnProperties }}"
    - name: Get Compartment ID
      command: "pwsh GetActiveChildCompartment.ps1 {{ VcnProperties.compartment }} OCID"
      register: compartment_id
    - name: Results
      debug:
        msg: "{{ compartment_id }}"

    - name: Get the VCN ID
      command: "pwsh GetVcn.ps1 {{ VcnProperties.compartment }} {{ VcnProperties.vcn_name }} OCID {{VcnProperties.region }}"
      register: vcn_id
    - name: Results
      debug:
        msg: "{{ vcn_id }}"

    - name: Make Sure The VCN Exists, Fail on Exit
      oci_vcn_facts:
        vcn_id: "{{ vcn_id.stdout }}"
        region: "{{ VcnProperties.region }}"
      register: vcn_object
    - name: Results
      debug:
        msg: "{{ vcn_object }}"

    - name: Get the Subnet OCID if present
      command: "pwsh GetSubnet.ps1 {{ VcnProperties.compartment }} {{ VcnProperties.vcn_name }} {{ VcnProperties.sub_name }} {{ VcnProperties.region }} OCID"
      register: subnet_id
    - name: Results
      debug:
        msg: "{{ subnet_id.stdout }}"

    - name: Get the Subnet Object create if not present
      oci_subnet_facts:
        subnet_id: "{{ subnet_id.stdout }}"
        region: "{{ VcnProperties.region }}"
      register: subnet_object
      ignore_errors: yes
    - name: Results
      debug:
        msg: "{{ subnet_object }}"

# We've done all our checks, now create the VCN object only if it does not exist        
    - name: Create or Update a Subnet
      oci_subnet:
        compartment_id:           "{{ compartment_id.stdout }}"
        display_name:             "{{ VcnProperties.sub_name }}"
        dns_label:                "{{ VcnProperties.sub_dns }}"
        vcn_id:                   "{{ vcn_id.stdout }}"
        cidr_block:               "{{ VcnProperties.sub_cidr }}"
        prohibit_public_ip_on_vnic: "{{ VcnProperties.prohibit_public_ip_on_vnic }}"
        region: "{{ VcnProperties.region }}"
        wait: yes
      register: result
      when: subnet_object is failed

    - name: Print Results
      debug:
        msg: "{{ result }}"
