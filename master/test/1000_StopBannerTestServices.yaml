---
# Copyright 2019 â€“ 2020 David Kent Consulting, Inc.
# All Rights Reserved.
# 
# NOTICE:  All information contained herein is, and remains
# the property of David Kent Consulting, Inc.; David Kent Cloud Solutions, Inc.;
# and its affiliates (The Company). The intellectual and technical concepts contained
# herein are proprietary to The Company and may be covered by U.S. and Foreign Patents,
# patents in process, and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from The Company.
#
# This file is subject to the terms and conditions defined in
# file 'LICENSE.txt', which is part of this source code package.

##########################################################################################################
###                             READ ME FIRST                                                          ###
##########################################################################################################

#REQUIREMENTS
#============
#1.  FOR all virtual machines, regardless if Linux, DBaaS, or otherwise, python3 must be installed.
#
#2.  On DBaaS appliances, the following procedure must be run:
#    2a) Uncomment around line 63 to permit password login, "PasswordAuthentication yes" and comment 
#        out around line 65, "PasswordAuthentication no" in the /etc/ssh/sshd_config file
#    2b) Append the end of the sshd_config file with "AllowUsers ansible"
#    2c) Restart the SSH service
#    2d) Append the sudoers file around line 111 with the entry:
#          %ansible ALL=(ALL) NOPASSWD: ALL
#    3e) Create the ansible user and make it a member of the wheel group, set a complex password
#        for the ansible user.
#    3f) Verify the account with "ssh ansible@localhost". Make sure the user can sudo as root without
#        a password.
#    3g) Use the ssh-copy-id tool on the Ansible automation host to key the user ansible.
#    3h) Reverse the actions taken in step 2a, and restart the SSH service.
#
#3. For Linux systems, follow the actions above except for step 2b.
#
#4. Add the host to the Ansible inventory, see https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html 
#
#5. Add an inventory var for the hosts that sets the python intepreter to python3, see 
#    https://docs.ansible.com/ansible/latest/reference_appendices/python_3_support.html 
#
#6. test with "ansible <hostname> -m ping"
#   see https://docs.ansible.com/ansible/2.3/ping_module.html
#   
#7. Write your code.........

- name: Start or stop test services for NWMSU
  gather_facts: no
  hosts: localhost
  vars:
    #python_path:                    "/Users/henrywojteczko/bin/python"
    start_stop_option:              "stop"
    # Database Appliances to take action on
    DWTSCDB:
      db_container:             "DWTSCDB"
      service_node:             "nwmsudbt08"
    FNHRCDB:
      db_container:             "FNHRCDB"
      service_node:             "nwmsudbt02"
    FISCCDB:
      db_container:             "FISCCDB"
      service_node:             "nwmsudbt01"
    FRZCDB:
      db_container:             "FRZCDB"
      service_node:             "nwmsudbt03"
    ODSTSCDB:
      db_container:             "ODSTSCDB"
      service_node:             "nwmsudbt09"
    SNAPCDB:
      db_container:             "SNAPCDB"
      service_node:             "nwmsudbt06"
    STUCDB:
      db_container:             "STUCDB"
      service_node:             "nwmsudbt04"
    UPGRCDB:
      db_container:             "UPGRCDB"
      service_node:             "nwmsudbt05"

    # Kubernetes node pools to take action on
    NWMSUKBC01T01:
      kubernetes_version:           "v1.15.7"
      name:                         "NWMSUKBC01"
      nodepool:
        name:                       "NWMSUKBC01T01"
        node_image_name:            "Oracle-Linux-7.6"
        node_shape:                 "VM.Standard2.2"
        quantity_per_subnet:        3
        AD1:                        "sIah:US-ASHBURN-AD-1"
        AD2:                        "sIah:US-ASHBURN-AD-2"
        AD3:                        "sIah:US-ASHBURN-AD-3"
        ssh_key:                    "'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCLCqza7HRcaRLuAuA/P1z7zIT5I82rLmgq060RIaKTpu9g1Lnnjto6qmdsxhPIaxuJF7q7BmMSBb1IDy4Fw1B+PcvqJLZljug9gIXQa4uH9zFnyXAy1DuWst3/gFxq0OR9en8VBYpQuJPNZ7HYhbJU13s2v3+7c73XIrdTngyEguYEUq5nSv+t58RXckoeSIZYmHBWZm0q0m2bzRVp5FGjT9WUlCIsfJIfY+PrzHOaUnS2ouJdCVhwxSIpFWB+s1/HyF0im8CuBJNHLJW/drHad0qXGCp739Ku5UXv/3FcQeL3bykzBr11G6HJJuqLug9831evKIO2QsVkcrrWTUd ansible@nwmsuansp01'"
      options:
        add_ons:
          is_kubernetes_dashboard_enabled: yes
          is_tiller_enabled: no
        kubernetes_network_config:
          pods_cidr:                "10.96.0.0/16"
          services_cidr:            "10.244.0.0/16"
      wait:                         "no"
    NWMSUKBC01T02:
      kubernetes_version:           "v1.15.7"
      name:                         "NWMSUKBC01"
      nodepool:
        name:                       "NWMSUKBC01T02"
        node_image_name:            "Oracle-Linux-7.6"
        node_shape:                 "VM.Standard2.2"
        quantity_per_subnet:        3
        AD1:                        "sIah:US-ASHBURN-AD-1"
        AD2:                        "sIah:US-ASHBURN-AD-2"
        AD3:                        "sIah:US-ASHBURN-AD-3"
        ssh_key:                    "'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCLCqza7HRcaRLuAuA/P1z7zIT5I82rLmgq060RIaKTpu9g1Lnnjto6qmdsxhPIaxuJF7q7BmMSBb1IDy4Fw1B+PcvqJLZljug9gIXQa4uH9zFnyXAy1DuWst3/gFxq0OR9en8VBYpQuJPNZ7HYhbJU13s2v3+7c73XIrdTngyEguYEUq5nSv+t58RXckoeSIZYmHBWZm0q0m2bzRVp5FGjT9WUlCIsfJIfY+PrzHOaUnS2ouJdCVhwxSIpFWB+s1/HyF0im8CuBJNHLJW/drHad0qXGCp739Ku5UXv/3FcQeL3bykzBr11G6HJJuqLug9831evKIO2QsVkcrrWTUd ansible@nwmsuansp01'"
      options:
        add_ons:
          is_kubernetes_dashboard_enabled: yes
          is_tiller_enabled: no
        kubernetes_network_config:
          pods_cidr:                "10.96.0.0/16"
          services_cidr:            "10.244.0.0/16"
      wait:                         "no"
    NWMSUKBC01T03:
      kubernetes_version:           "v1.15.7"
      name:                         "NWMSUKBC01"
      nodepool:
        name:                       "NWMSUKBC01T03"
        node_image_name:            "Oracle-Linux-7.6"
        node_shape:                 "VM.Standard2.2"
        quantity_per_subnet:        3
        AD1:                        "sIah:US-ASHBURN-AD-1"
        AD2:                        "sIah:US-ASHBURN-AD-2"
        AD3:                        "sIah:US-ASHBURN-AD-3"
        ssh_key:                    "'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCLCqza7HRcaRLuAuA/P1z7zIT5I82rLmgq060RIaKTpu9g1Lnnjto6qmdsxhPIaxuJF7q7BmMSBb1IDy4Fw1B+PcvqJLZljug9gIXQa4uH9zFnyXAy1DuWst3/gFxq0OR9en8VBYpQuJPNZ7HYhbJU13s2v3+7c73XIrdTngyEguYEUq5nSv+t58RXckoeSIZYmHBWZm0q0m2bzRVp5FGjT9WUlCIsfJIfY+PrzHOaUnS2ouJdCVhwxSIpFWB+s1/HyF0im8CuBJNHLJW/drHad0qXGCp739Ku5UXv/3FcQeL3bykzBr11G6HJJuqLug9831evKIO2QsVkcrrWTUd ansible@nwmsuansp01'"
      options:
        add_ons:
          is_kubernetes_dashboard_enabled: yes
          is_tiller_enabled: no
        kubernetes_network_config:
          pods_cidr:                "10.96.0.0/16"
          services_cidr:            "10.244.0.0/16"
      wait:                         "no"

# Compartment and region data
    Bastion:
      compartment:                  "bas_comp"
      region:                       "us-ashburn-1"
    Database:
      compartment:                  "dbs_comp"
      region:                       "us-ashburn-1"
    Test:
      compartment:                  "tst_comp"
      region:                       "us-ashburn-1"

    # All vars required to create this VM
    # This VM to be created in the bastion compartment. It will have a publically visible IP address.
    # The security list is to be used to restrict access to the VM as needed, such as blocking internet
    # access.

  tasks:

##########################################################################################################
###                             Scale down the KB Cluster Nodepool                                     ###
##########################################################################################################
  - name: Delete The Test Nodepool 1
    command: "pwsh DelNodePool.ps1 {{Test.compartment}} {{NWMSUKBC01T01.name}} {{NWMSUKBC01T01.nodepool.name}} {{Test.region}} YES"
    register: results
  - name: Print Results
    debug:
      msg: "{{results}}"
  - name: Delete The Test Nodepool 2
    command: "pwsh DelNodePool.ps1 {{Test.compartment}} {{NWMSUKBC01T02.name}} {{NWMSUKBC01T02.nodepool.name}} {{Test.region}} YES"
    register: results
  - name: results
    debug:
      msg: "{{results}}"
  - name: Delete The Test Nodepool 3
    command: "pwsh DelNodePool.ps1 {{Test.compartment}} {{NWMSUKBC01T03.name}} {{NWMSUKBC01T03.nodepool.name}} {{Test.region}} YES"
    register: results
  - name: results
    debug:
      msg: "{{results}}"
##########################################################################################################
###                             Stop VM  here                                                          ###
##########################################################################################################
  - name: Stop OS for VM NWMSUBASP01
    command: "ansible NWMSUBASP01 --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop OS for VM NWMSUJSUBT01
    command: "ansible NWMSUJSUBT01 --become --become-user root -a '/sbin/shutdown -P'"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - name: Stop the VM Instance NWMSUBASP01
    command: "pwsh 100_start_stop_VM.ps1 {{ Bastion.compartment }} NWMSUBASP01 {{ Bastion.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - name: Stop the VM instance NWMSUJSUBT01
    command: "pwsh 100_start_stop_VM.ps1 {{ Database.compartment }} NWMSUJSUBT01 {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - pause:
      minutes: 2     
##########################################################################################################
###                             Stop the private DB Instances                                          ###
##########################################################################################################
  - name: Stop the database for private database name DWTS in container DWTSCDB
    command: "ansible DWTSCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh DWTSCDB'"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - name: Stop the database for private database name FNHR in container FNHRCDB
    command: "ansible FNHRCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh FNHRCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop the database for private database name DWTEST in container DWTSCDB
    command: "ansible DWTSCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh DWTSCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop the database for private database name FISC in container FISCCDB
    command: "ansible FISCCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh FISCCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop the database for private database name FRZ in container FRZCDB
    command: "ansible FRZCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh FRZCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop the database ODSTSCDB
    command: "ansible ODSTSCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh ODSTSCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - name: Stop the database for private database name SNAP in container SNAPCDB
    command: "ansible SNAPCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh SNAPCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop the database for private database name STUDENT in container STUCDB
    command: "ansible STUCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh STUCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop the database for private database name UPGR in container UPGRCDB
    command: "ansible UPGRCDB --become --become-user oracle -a '/home/oracle/bin/common/stoporacle.sh UPGRCDB'"
    ignore_errors: yes
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

# ##########################################################################################################
# ###                             Shutdown the service nodes OSs                                         ###
# ##########################################################################################################
  - name: Stop the OS service node DWTSCDB
    command: "ansible DWTSCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - name: Stop OS service node FNHRCDB
    command: "ansible FNHRCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"
  
  - name: Stop OS service node DWTSTCDB
    command: "ansible DWTSTCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"
  
  - name: Stop OS service node FISCCDB
    command: "ansible FISCCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"
  
  - name: Stop OS service node FRZCDB
    command: "ansible FRZCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop OS service node ODSTSCDB
    command: "ansible ODSTSCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop OS service node SNAPCDB
    command: "ansible SNAPCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop OS service node STUCDB
    command: "ansible STUCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"
  
  - name: Stop OS service node UPGRCDB
    command: "ansible UPGRCDB --become --become-user root -a '/sbin/shutdown -P'"
    register: results
    ignore_errors: yes
  - name: Results
    debug:
      msg: "{{ results }}"
  
  - pause:
      minutes: 6


##########################################################################################################
###                             Stop the service nodes                                                 ###
##########################################################################################################
  - name: Stop DBaaS DWTSCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ DWTSCDB.db_container }} {{ DWTSCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - name: Stop DBaaS FNHRCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ FNHRCDB.db_container }} {{ FNHRCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{results}}"

  - name: Stop DBaaS FISCCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ FISCCDB.db_container }} {{ FISCCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop DBaaS FRZCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ FRZCDB.db_container }} {{ FRZCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop DBaaS ODSTSCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ ODSTSCDB.db_container }} {{ ODSTSCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop DBaaS SNAPCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ SNAPCDB.db_container }} {{ SNAPCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop DBaaS STUCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ STUCDB.db_container }} {{ STUCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

  - name: Stop DBaaS UPGRCDB Service Node
    command: "pwsh 200_start_stop_DBaaS.ps1 {{ Database.compartment }} {{ UPGRCDB.db_container }} {{ UPGRCDB.service_node }} {{ Database.region }} {{ start_stop_option }}"
    register: results
  - name: Results
    debug:
      msg: "{{ results }}"

